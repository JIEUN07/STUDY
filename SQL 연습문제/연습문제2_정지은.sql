-- 1. 1) 박지성이 구매한 도서의 출판사수
USE BOOKSTORE;
SELECT COUNT(PUBLISHER) FROM BOOK
WHERE BOOKID IN (SELECT BOOKID FROM ORDERS O
INNER JOIN CUSTOMER C
ON O.CUSTID = C.CUSTID
WHERE C.NAME = '박지성');

-- 1. 2) 박지성이 구매한 도서 이름, 가격, 정가와 판매가격 차이
SELECT BOOKNAME, PRICE, (B.PRICE-O.SALEPRICE) FROM BOOK B
INNER JOIN ORDERS O
ON B.BOOKID = O.BOOKID
INNER JOIN CUSTOMER C
ON O.CUSTID = C.CUSTID
WHERE C.NAME = '박지성';

-- 1. 3) 박지성이 구매하지 않은 도서 이름
SELECT BOOKNAME FROM BOOK
WHERE BOOKID <> ALL(SELECT BOOKID FROM ORDERS O
INNER JOIN CUSTOMER C
ON O.CUSTID = C.CUSTID
WHERE C.NAME = '박지성');

-- 2. 1) 주문하지않은 고객이름 (부속질의 사용)
SELECT NAME FROM CUSTOMER
WHERE NAME NOT IN 
(SELECT DISTINCT NAME FROM CUSTOMER C, ORDERS O 
WHERE (C.CUSTID = O.CUSTID));

-- 2. 2) 주문 금액의 총액과 주문의 평균금액
SELECT SUM(SALEPRICE), AVG(SALEPRICE)
FROM ORDERS;

-- 2. 3) 고객의 이름과 고객별 구매액
SELECT C.NAME, SUM(O.SALEPRICE) FROM CUSTOMER C
INNER JOIN ORDERS O
ON O.CUSTID = C.CUSTID
GROUP BY O.CUSTID;

-- 2. 4) 고객의 이름과 고객이 구매한 도서목록
SELECT C.NAME, B.BOOKNAME FROM CUSTOMER C
INNER JOIN ORDERS O
ON O.CUSTID = C.CUSTID
INNER JOIN BOOK B
ON O.BOOKID = B.BOOKID;

-- 2. 5) 도서가격(BOOK)과 판매가격(ORDERS)의 차이가 가장 많은 주문
SELECT MAX(B.PRICE-O.SALEPRICE) FROM BOOK B
INNER JOIN ORDERS O
ON B.BOOKID = O.BOOKID;

-- 2. 6) 도서 판매액 평균보다 자신의 구매액이 더 높은 고객 이름
SELECT C.NAME, SUM(O.SALEPRICE) SUM FROM CUSTOMER C
INNER JOIN ORDERS O
ON O.CUSTID = C.CUSTID
GROUP BY O.CUSTID
HAVING SUM > (SELECT AVG(SALEPRICE) FROM ORDERS);

-- 3.
USE SAKILA;
SELECT C.FIRST_NAME, C.LAST_NAME, A.ADDRESS, CT.CITY
FROM CUSTOMER C
INNER JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID
INNER JOIN CITY CT
ON A.CITY_ID = CT.CITY_ID
WHERE A.DISTRICT = 'CALIFORNIA';

-- 4. 1)
SELECT F.TITLE FROM FILM F
INNER JOIN FILM_ACTOR FA
ON FA.FILM_ID = F.FILM_ID
INNER JOIN ACTOR A
ON FA.ACTOR_ID = A.ACTOR_ID
WHERE A.ACTOR_ID = (SELECT A.ACTOR_ID FROM ACTOR A WHERE A.FIRST_NAME = 'JOHN');

-- 4. 2) 같은 도시에 있는 사람들의 주소 반환
SELECT A1.ADDRESS, A2.ADDRESS, A1.CITY_ID
FROM ADDRESS A1
INNER JOIN ADDRESS A2
WHERE A1.CITY_ID = A2.CITY_ID
AND A1.ADDRESS_ID <> A2.ADDRESS_ID;

-- 5. 1)
SELECT FIRST_NAME, LAST_NAME FROM CUSTOMER
WHERE FIRST_NAME LIKE 'L%'
UNION
SELECT FIRST_NAME, LAST_NAME FROM ACTOR
WHERE FIRST_NAME LIKE 'L%';

-- 5. 2)
SELECT * FROM (SELECT FIRST_NAME, LAST_NAME FROM CUSTOMER
WHERE FIRST_NAME LIKE 'L%'
UNION
SELECT FIRST_NAME, LAST_NAME FROM ACTOR
WHERE FIRST_NAME LIKE 'L%') NAMENAME
ORDER BY LAST_NAME;

-- 6. 1)
SELECT F.TITLE
FROM CATEGORY CA, FILM_CATEGORY FCA, FILM F
WHERE FCA.CATEGORY_ID = CA.CATEGORY_ID
AND F.FILM_ID = FCA.FILM_ID
AND CA.NAME = 'ACTION';

-- 6. 2)
SELECT F.TITLE
FROM CATEGORY CA
INNER JOIN FILM_CATEGORY FCA
ON FCA.CATEGORY_ID = CA.CATEGORY_ID
INNER JOIN FILM F
ON F.FILM_ID = FCA.FILM_ID
WHERE CA.NAME = 'ACTION';

-- 6. 3)
SELECT STAR_G.LEVEL, COUNT(*)
FROM (SELECT A.FIRST_NAME, A.LAST_NAME, COUNT(*) ALEVEL
FROM ACTOR A
INNER JOIN FILM_ACTOR FCA
ON A.ACTOR_ID = FCA.ACTOR_ID
GROUP BY A.ACTOR_ID) A_G
INNER JOIN 
(SELECT 'HOLLYWOOD STAR' LEVEL, 30 MIN_ROLES, 99999 MAX_ROLES
UNION ALL
SELECT 'PROLIFIC ACTOR' LEVEL, 20 MIN_ROLES, 29 MAX_ROLES
UNION ALL
SELECT 'NEWCOMER' LEVEL, 10 MIN_ROLES, 19 MAX_ROLES) STAR_G
ON ALEVEL BETWEEN STAR_G.MIN_ROLES AND STAR_G.MAX_ROLES
GROUP BY STAR_G.LEVEL;
