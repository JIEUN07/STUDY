SELECT 3000+3000; -- 함수라 바로 연산가능

USE BOOKSTORE;
-- SUM(SUM(10,10),10) -- SUM은 레코드이므로 밑에 FROM을 같이씀
SELECT BOOKNAME
FROM BOOK
WHERE PRICE = (SELECT 3000+3000);

SELECT MAX(PRICE) FROM book;
SELECT BOOKNAME FROM BOOK
WHERE PRICE =35000;

SELECT BOOKNAME FROM BOOK
WHERE PRICE = (SELECT MAX(PRICE) FROM BOOK);

-- 도서 구매한적 있는 고객이름 검색
SELECT DISTINCT CUSTID -- 리스트가 너무 길어서 중복제거해줌
FROM ORDERS; -- 결과: 1,2,3,4

SELECT NAME FROM CUSTOMER
WHERE CUSTID IN (1,2,3,4); -- 5보다 작은사람 이런건 안됨 하나씩 물어봐야하는 상황

SELECT NAME FROM CUSTOMER
WHERE CUSTID IN (SELECT DISTINCT CUSTID FROM ORDERS);

-- 대한미디어에서 출판한 도서를 구매한 고객이름
SELECT * FROM BOOK
WHERE PUBLISHER ='대한미디어'; -- BOOKID = 3,4,

SELECT * FROM ORDERS
WHERE BOOKID IN (3,4); -- CUSTID = 1

SELECT * FROM CUSTOMER
WHERE CUSTID = (SELECT CUSTID FROM ORDERS WHERE BOOKID IN (SELECT BOOKID FROM BOOK WHERE PUBLISHER ='대한미디어')) ;

-- SUM(SUM(SUM(10,10),10),10)

-- 출판사별로 출판사의 평균 도서가격보다 비싼 도서
SELECT PUBLISHER, AVG(PRICE) FROM BOOK
GROUP BY PUBLISHER;

SELECT BOOKNAME FROM BOOK
WHERE PRICE >= 13000 AND PUBLISHER = '나무수';

SELECT * FROM BOOK B1
WHERE B1.PRICE >= (SELECT AVG(B2.PRICE) FROM BOOK B2 WHERE B2.PUBLISHER = B1.PUBLISHER); 
-- JOIN 구문은 다른테이블을 엮어줄떄 사용 (이 구문은 같은 테이블에서 가져온것)
-- SUM(10,10) =/ SUM(10,10) 이다. 서로 다른 임시데이터로 저장되기 때문


USE SAKILA;
DESC CUSTOMER; -- 설명

SELECT MAX(CUSTOMER_ID) FROM CUSTOMER; -- 599

SELECT CUSTOMER_ID , FIRST_NAME, LAST_NAME FROM CUSTOMER
WHERE CUSTOMER_ID = 599;

 SELECT CUSTOMER_ID , FIRST_NAME, LAST_NAME FROM CUSTOMER
WHERE CUSTOMER_ID = (SELECT MAX(CUSTOMER_ID) FROM CUSTOMER);

SELECT * FROM COUNTRY;
SELECT * FROM COUNTRY
WHERE COUNTRY IN('CANADA','MEXICO');

-- 무료영화를 대여한적이 없는 모든 고객
DESC PAYMENT;

SELECT * FROM PAYMENT
WHERE AMOUNT = 0;
USE SAKILA;
SELECT  C.FIRST_NAME, C.LAST_NAME FROM CUSTOMER C
INNER JOIN PAYMENT P
ON C.CUSTOMER_ID = P.CUSTOMER_ID
WHERE P.AMOUNT <> ALL(SELECT P.AMOUNT FROM PAYMENT P WHERE P.AMOUNT = 0); -- ALL이나 DISTINCT 붙여야함

SELECT FIRST_NAME, LAST_NAME FROM CUSTOMER
WHERE CUSTOMER_ID NOT IN (SELECT CUSTOMER_ID FROM PAYMENT WHERE AMOUNT = 0);

-- 대한민국에서 거주하는 고객의 이름과 도서를 주문한 고객의 이름 (관계없는 두데이터의 통합)
USE BOOKSTORE;
SELECT * FROM CUSTOMER
WHERE ADDRESS LIKE '대한민국%';

SELECT NAME FROM CUSTOMER
WHERE CUSTID IN ( SELECT DISTINCT CUSTID FROM ORDERS);

SELECT NAME FROM CUSTOMER
WHERE ADDRESS LIKE '대한민국%'
UNION
SELECT NAME FROM CUSTOMER
WHERE CUSTID IN ( SELECT DISTINCT CUSTID FROM ORDERS); -- UNION 합집합

SELECT 1000 AS NAME
UNION
SELECT 'DDD' AS NAME;


-- 주문이 있는 고객의 이름과 주소
USE SAKILA;
SELECT *
FROM CUSTOMER C, ADDRESS A
WHERE C.ADDRESS_ID = A.ADDRESS_ID; 

SELECT C.FIRST_NAME, C.LAST_NAME, A.ADDRESS, A.POSTAL_CODE
FROM CUSTOMER C
INNER JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID
WHERE A.POSTAL_CODE = 52137;

SELECT C.FIRST_NAME, C.LAST_NAME, CT.CITY
FROM CUSTOMER C
INNER JOIN ADDRESS A
ON C.ADDRESS_ID = A.ADDRESS_ID
INNER JOIN CITY CT
ON A.CITY_ID = CT.CITY_ID;

-- 두명의 특정배우가 출연한 영화제목 모두검색
DESC FILM_ACTOR;
DESC ACTOR;

-- CATE MCQUEEN, CUBA BIRCH
SELECT F.TITLE, A.FIRST_NAME, A.LAST_NAME 
FROM FILM F
INNER JOIN FILM_ACTOR FA
ON F.FILM_ID = FA.FILM_ID
INNER JOIN ACTOR A
ON FA.ACTOR_ID = A.ACTOR_ID
WHERE ((A.FIRST_NAME = 'CATE' AND A.LAST_NAME = 'MCQUEEN')
OR (A.FIRST_NAME = 'CUBA' AND A.LAST_NAME = 'BIRCH'));

-- CATE MCQUEEN, CUBA BIRCH 각각의 테이블로 쪼개기
SELECT F.TITLE, A1.FIRST_NAME, A2.FIRST_NAME 
FROM FILM F
INNER JOIN FILM_ACTOR FA1
ON F.FILM_ID = FA1.FILM_ID
INNER JOIN ACTOR A1
ON FA1.ACTOR_ID = A1.ACTOR_ID
INNER JOIN FILM_ACTOR FA2
ON F.FILM_ID = FA2.FILM_ID
INNER JOIN ACTOR A2
ON FA2.ACTOR_ID = A2.ACTOR_ID
WHERE ((A1.FIRST_NAME = 'CATE' AND A1.LAST_NAME = 'MCQUEEN')
AND (A2.FIRST_NAME = 'CUBA' AND A2.LAST_NAME = 'BIRCH'));

-- 영화 대여 지불금을 기준으로 고객을 그룹화
-- SMALL FRY 0-74.99
-- AVERAGE JOES 75-149.99
-- HEAVY HITTERS 150-9,999,999.99
SELECT 'SMALL FRY' NAME, 0 LOW_LIMIT, 74.99 HIGHT_LIMIT
UNION
SELECT 'AVERAGE JOES' NAME, 75 LOW_LIMIT, 149.99 HIGHT_LIMIT
UNION
SELECT 'HEAVY HITTERS' NAME, 150 LOW_LIMIT, 9999999.99 HIGHT_LIMIT; -- UNION 중복데이터 제외
-- 위를 하나의 테이블 형태로 생각하면 됨

-- 고객 그룹별 고객수
SELECT MYGROUP.NAME, COUNT(*)
FROM (SELECT CUSTOMER_ID, SUM(AMOUNT) TOTAL
FROM PAYMENT
GROUP BY CUSTOMER_ID) MYPAY -- 하나의 테이블로 간주함
INNER JOIN (SELECT 'SMALL FRY' NAME, 0 LOW_LIMIT, 74.99 HIGHT_LIMIT
UNION
SELECT 'AVERAGE JOES' NAME, 75 LOW_LIMIT, 149.99 HIGHT_LIMIT
UNION
SELECT 'HEAVY HITTERS' NAME, 150 LOW_LIMIT, 9999999.99 HIGHT_LIMIT) MYGROUP -- 하나의 테이블
ON MYPAY.TOTAL BETWEEN MYGROUP.LOW_LIMIT AND MYGROUP.HIGHT_LIMIT
GROUP BY MYGROUP.NAME;


-- 데이터 테이블 만들기
SHOW DATABASES;
CREATE DATABASE TEST;
USE TEST;
CREATE TABLE PERSON 
(PERSON_ID SMALLINT UNSIGNED, -- UNSIGNED 양수만 가능
FNAME VARCHAR(20),
LNAME VARCHAR(20), -- VARCHAR(20) LENGTH최대 20까지 채울수있음
EYE_COLOR CHAR(2),  -- CHAR(2) LENGTH 무조건 2
BIRTH_DATE DATE,
STREET VARCHAR(30),
CITY VARCHAR(20),
STATE VARCHAR(20),
COUNTRY VARCHAR(20),
POSTAL_CODE VARCHAR(20),
CONSTRAINT PK_PERSON
PRIMARY KEY (PERSON_ID)); -- 밑에 따로 써야 작명 가능 (위의 함수 옆에 쓸경우 이름지정 안됨)
DESC PERSON;

ALTER TABLE PERSON
MODIFY PERSON_ID SMALLINT UNSIGNED AUTO_INCREMENT;
DESC PERSON;

INSERT INTO PERSON(PERSON_ID, FNAME, LNAME, EYE_COLOR, BIRTH_DATE)
VALUES (NULL, 'WILLAM', 'TURNER', 'br', '1970-04-02');
SELECT *FROM PERSON;


USE BOOKSTORE;

CREATE TABLE NEWBOOK
(BOOKNAME VARCHAR(20) NOT NULL,
PUBLISHER VARCHAR(20) UNIQUE,
PRICE INTEGER DEFAULT 10000 CHECK(PRICE>1000), -- 디폴트 10000값 가격이 1000보다 큰지 확인
PRIMARY KEY (BOOKNAME, PUBLISHER));
DESC NEWBOOK; -- 테이블 생성

CREATE TABLE NEWBOOK2
(BOOKNAME VARCHAR(20) NOT NULL,
PUBLISHER VARCHAR(20) UNIQUE,
PRICE INTEGER DEFAULT 10000 CHECK(PRICE>1000));

DROP TABLE NEWBOOK; -- 테이블 삭제

CREATE TABLE NEWCUST
(CUSTID INTEGER PRIMARY KEY,
NAME VARCHAR(40),
ADDRESS VARCHAR(40),
PHONE VARCHAR(30));
DESC NEWCUST;

CREATE TABLE NEWORDERS
(ORDERID INTEGER,
CUSTID INTEGER NOT NULL,
BOOKID INTEGER NOT NULL,
SALEPRICE INTEGER,
ORDERDATE DATE,
PRIMARY KEY (ORDERID),
FOREIGN KEY (CUSTID) REFERENCES NEWCUST(CUSTID) ON DELETE CASCADE);
DESC NEWORDERS;

ALTER TABLE NEWBOOK ADD ISBN VARCHAR(13); -- ISBN 열 추가
ALTER TABLE NEWBOOK MODIFY ISBN INTEGER; -- ISBN 수정
ALTER TABLE NEWBOOK DROP COLUMN ISBN; -- ISBN 행 삭제
ALTER TABLE NEWBOOK MODIFY PRICE INTEGER NOT NULL; -- PRICE 열 수정
ALTER TABLE NEWBOOK2 ADD PRIMARY KEY(BOOKNAME, PUBLISHER);
DESC NEWBOOK2;

DROP TABLE NEWBOOK; -- 가능
DROP TABLE NEWCUST; -- 불가능 FOREIGN KEY 구문으로 묶여있기 때문 (구문을 풀고 삭제해야함)

INSERT INTO BOOK(BOOKID, BOOKNAME, PUBLISHER, PRICE)
VALUES(11, '재미있는 음악이야기', '그냥 출판사', 12000);
SELECT * FROM BOOK;
UPDATE BOOK SET PRICE = 12320
WHERE BOOKID = 11;
